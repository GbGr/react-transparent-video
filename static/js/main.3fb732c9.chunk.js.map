{"version":3,"sources":["assets/video_with_mask.mp4","assets/element_02_lq.mp4","assets/space_bg.mp4","../../src/Renderer.ts","../../src/index.tsx","../../src/vertexShader.ts","../../src/fragmentShader.ts","App.tsx","index.tsx"],"names":["module","exports","WebGLRenderer","setSize","this","width","height","Renderer","TransparentVideo","props","videoStyle","videoRef","React","canvasRef","video","canvas","init","canvasRect","renderer","alpha","window","clientRect","gl","videoTexture","Texture","generateMipmaps","videoHeight","geometry","Geometry","position","size","data","Float32Array","uv","program","Program","vertex","fragment","uniforms","uVideoTexture","value","mesh","Mesh","update","scene","requestAnimationFrame","initGL","className","ref","style","undefined","display","App","loop","muted","autoPlay","src","VideoBG","VideoWithMask","VideoWithMask2","ReactDOM","render","document","getElementById"],"mappings":"4IAAAA,EAAOC,QAAU,IAA0B,6C,mBCA3CD,EAAOC,QAAU,IAA0B,2C,mBCA3CD,EAAOC,QAAU,IAA0B,sC,uLCEtBC,c,QACnB,c,OACE,qB,0GAGFC,sBACEC,KAAA,QACAA,KAAA,SAEAA,KAAA,gBAAuBC,EAAQD,KAA/B,IACAA,KAAA,iBAAwBE,EAASF,KAAjC,K,EAViBF,CAAsBK,KCQ9BC,EAAoD,SAACC,GAChE,IAAMC,EAAkCD,SAAxC,GACAC,iBAEA,IAAMC,EAAWC,sBACXC,EAAYD,sBAelB,OAbAA,qBAAgB,WACd,GAAID,WAAoBE,EAAxB,QAA2C,CACzC,IAAMC,EAAQH,EAAd,QACMI,EAASF,EAAf,QAMAF,yCALa,SAAPK,IACAP,EAAJ,UAAoBK,gBAwB5B,SAAgBA,EAAhB,GACE,IAAMG,EAAaF,EAAnB,wBACMG,EAAW,IAAIhB,EAAc,CACjCa,OADiC,EAEjCI,OAFiC,EAGjCd,MAAOY,EAH0B,MAIjCX,OAAQW,EAAWX,SAGrBc,kCAAkC,WAChC,IAAMC,EAAsBN,EAA5B,wBACAG,UAAiBG,EAAjBH,MAAmCG,EAAnCH,WAGF,IAAMI,EAAKJ,EAAX,GACMK,EAAe,IAAIC,EAAJ,IAAgB,CACnCC,iBADmC,EAEnCpB,MAAOS,EAF4B,WAGnCR,OAAQQ,EAAMY,cAEhBH,UACAA,iBAEAD,sBAGA,IAAMK,EAAW,IAAIC,EAAJ,IAAiB,CAChCC,SAAU,CAAEC,KAAF,EAAWC,KAAM,IAAIC,aAAa,eAAjB,KAC3BC,GAAI,CAAEH,KAAF,EAAWC,KAAM,IAAIC,aAAa,CAAC,EAAG,EAAG,EAAG,EAAG,EAA9B,OAIjBE,EAAU,IAAIC,EAAJ,IAAgB,CAC9BC,OC/EJ,oJDgFIC,SEhFJ,6QFiFIC,SAAU,CACRC,cAAe,CAAEC,MAAOjB,MAItBkB,EAAO,IAAIC,EAAJ,IAAa,CAAEf,SAAF,EAAYO,aAErC,SAAUS,IACTpB,iBAEAL,SAAgB,CAAE0B,MAAOH,IAEzBI,yBALD,GAjEKC,CAAOhC,EAAPgC,GACAhC,4CAPNF,IAcE,+BAAKmC,UAAWtC,EAAMsC,WACpB,iDACMtC,GACJuC,IAAKrC,EACLsC,MAAOvC,EACPqC,eAAWG,KAEb,kCACEF,IAAKnC,EACLoC,MAAO,CAAE5C,MAAF,OAAiBC,OAAjB,OAAiC6C,QAAS,a,uDGf1CC,EAnBH,WACV,OACE,6BACE,2BACEC,MAAI,EACJC,OAAK,EACLC,UAAQ,EACRC,IAAKC,IACLV,UAAW,YAEb,wCACA,kBAAC,EAAD,CAAkBA,UAAU,QAAQS,IAAKE,IAAeH,UAAQ,EAACF,MAAI,EAACC,OAAK,IAC3E,kBAAC,EAAD,CAAkBE,IAAKG,IAAgBJ,UAAQ,EAACF,MAAI,EAACC,OAAK,IAC1D,kBAAC,EAAD,CAAkBE,IAAKE,IAAeH,UAAQ,EAACF,MAAI,EAACC,OAAK,IACzD,kBAAC,EAAD,CAAkBE,IAAKG,IAAgBJ,UAAQ,EAACF,MAAI,EAACC,OAAK,MCdhEM,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.3fb732c9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/video_with_mask.ea0690b1.mp4\";","module.exports = __webpack_public_path__ + \"static/media/element_02_lq.52d79d74.mp4\";","module.exports = __webpack_public_path__ + \"static/media/space_bg.62f4cd70.mp4\";","import { Renderer } from 'ogl'\n\nexport default class WebGLRenderer extends Renderer {\n  constructor(options: Partial<WebGLRendererOptions>) {\n    super(options)\n  }\n\n  setSize(width: number, height: number): void {\n    this.width = width\n    this.height = height\n\n    this.gl.canvas.width = width * this.dpr\n    this.gl.canvas.height = height * this.dpr\n  }\n}\n\ninterface WebGLRendererOptions {\n  canvas: HTMLCanvasElement,\n  width: number\n  height: number\n  dpr: number,\n  alpha: boolean,\n  depth: boolean,\n  stencil: boolean,\n  antialias: boolean,\n  premultipliedAlpha: boolean,\n  preserveDrawingBuffer: boolean,\n  powerPreference: string,\n  autoClear: boolean,\n  webgl: number,\n}\n\n","import * as React from 'react'\nimport { Geometry, Mesh, Program, Texture } from 'ogl'\nimport WebGLRenderer from './Renderer'\nimport vertexShader from './vertexShader'\nimport fragmentShader from './fragmentShader'\n\ninterface TransparentVideoProps extends React.HTMLProps<HTMLVideoElement> {\n  videoClassname?: string\n}\n\nexport const TransparentVideo: React.FC<TransparentVideoProps> = (props) => {\n  const videoStyle: React.CSSProperties = props.style || {}\n  videoStyle.display = 'none'\n\n  const videoRef = React.createRef<HTMLVideoElement>()\n  const canvasRef = React.createRef<HTMLCanvasElement>()\n\n  React.useEffect(() => {\n    if (videoRef.current && canvasRef.current) {\n      const video = videoRef.current\n      const canvas = canvasRef.current\n      const init = () => {\n        if (props.autoPlay) video.play().then()\n        initGL(video, canvas)\n        video.removeEventListener('loadeddata', init)\n      }\n      videoRef.current.addEventListener('loadeddata', init)\n    }\n  }, [])\n\n  return (\n    <div className={props.className}>\n      <video\n        {...props}\n        ref={videoRef}\n        style={videoStyle}\n        className={undefined}\n      />\n      <canvas\n        ref={canvasRef}\n        style={{ width: '100%', height: '100%', display: 'block' }}\n      />\n    </div>\n  )\n}\n\nfunction initGL(video: HTMLVideoElement, canvas: HTMLCanvasElement): void {\n  const canvasRect = canvas.getBoundingClientRect()\n  const renderer = new WebGLRenderer({\n    canvas,\n    alpha: true,\n    width: canvasRect.width,\n    height: canvasRect.height\n  })\n\n  window.addEventListener('resize', () => {\n    const clientRect: DOMRect = canvas.getBoundingClientRect()\n    renderer.setSize(clientRect.width, clientRect.height)\n  })\n\n  const gl = renderer.gl\n  const videoTexture = new Texture(gl, {\n    generateMipmaps: false,\n    width: video.videoWidth,\n    height: video.videoHeight\n  })\n  videoTexture.image = video\n  videoTexture.needsUpdate = true\n\n  gl.clearColor(0, 0, 0, 0)\n\n  // Triangle that covers viewport, with UVs that still span 0 > 1 across viewport\n  const geometry = new Geometry(gl, {\n    position: { size: 2, data: new Float32Array([-1, -1, 3, -1, -1, 3]) },\n    uv: { size: 2, data: new Float32Array([0, 0, 2, 0, 0, 2]) }\n  })\n  // Alternatively, you could use the Triangle class.\n\n  const program = new Program(gl, {\n    vertex: vertexShader,\n    fragment: fragmentShader,\n    uniforms: {\n      uVideoTexture: { value: videoTexture }\n    }\n  })\n\n  const mesh = new Mesh(gl, { geometry, program })\n\n  ;(function update(): void {\n    videoTexture.needsUpdate = true\n\n    renderer.render({ scene: mesh })\n\n    requestAnimationFrame(update)\n  })()\n}\n","const vertexShader = `\r\nattribute vec2 uv;\r\nattribute vec2 position;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n    vUv = uv;\r\n    gl_Position = vec4(position, 0, 1);\r\n}\r\n`\r\n\r\nexport default vertexShader","const fragmentShader = `\nprecision highp float;\n\nuniform sampler2D uVideoTexture;\n\nvarying vec2 vUv;\n\nvoid main() {\n    gl_FragColor = vec4(\n      texture2D(uVideoTexture, vec2(vUv.x, vUv.y * 0.5 + 0.5)).rgb,\n      texture2D(uVideoTexture, vec2(vUv.x, vUv.y * 0.5)).r\n    );\n}\n`\n\nexport default fragmentShader\n","import React from 'react'\nimport { TransparentVideo } from 'react-transparent-video'\nimport VideoBG from './assets/space_bg.mp4'\nimport VideoWithMask from './assets/video_with_mask.mp4'\nimport VideoWithMask2 from './assets/element_02_lq.mp4'\n\nconst App = () => {\n  return (\n    <div>\n      <video\n        loop\n        muted\n        autoPlay\n        src={VideoBG}\n        className={'videoBg'}\n      />\n      <h1>SaSacred</h1>\n      <TransparentVideo className='donat' src={VideoWithMask} autoPlay loop muted />\n      <TransparentVideo src={VideoWithMask2} autoPlay loop muted />\n      <TransparentVideo src={VideoWithMask} autoPlay loop muted />\n      <TransparentVideo src={VideoWithMask2} autoPlay loop muted />\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}